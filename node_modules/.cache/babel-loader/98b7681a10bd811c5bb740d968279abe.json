{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\SP\\\\spotify-clone-client\\\\src\\\\components\\\\pages-components\\\\GenrePage.js\";\nimport React from 'react';\nimport { useEffect, useState, useContext } from 'react';\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest';\nimport PageTitle from '../featured-components/PageTitle';\nimport PlayCard from '../featured-components/PlayCard';\nimport useId from '../../utilities/hooks/useId';\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll';\nimport { MessageContext } from '../../utilities/context';\nexport default function GenrePage() {\n  const id = useId();\n  const setMessage = useContext(MessageContext);\n  const [playLists, setPlayLists] = useState([]);\n  const [name, setName] = useState('');\n  const [setNext, lastRef] = useInfiScroll(setPlayLists);\n  useEffect(() => {\n    const [nameSource, requestName] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories/${id}`);\n    const [listSource, requestList] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories/${id}/playlists?limit=50`);\n\n    const makeRequest = async () => {\n      try {\n        const [nameData, listData] = await Promise.all([requestName(), requestList()]);\n        setName(nameData.name);\n        setPlayLists(listData.playlists.items);\n        setNext(listData.playlists.next);\n      } catch (error) {\n        setMessage(error);\n      }\n    };\n\n    if (id) {\n      makeRequest();\n    }\n\n    return () => {\n      nameSource.cancel();\n      listSource.cancel();\n    }; // eslint-disable-next-line\n  }, [id]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GenrePage page-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageTitle, {\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"browseGrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, playLists.map(playlist => /*#__PURE__*/React.createElement(PlayCard, {\n    ref: lastRef,\n    key: playlist.id,\n    info: playlist,\n    type: \"playlist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["E:/React/SP/spotify-clone-client/src/components/pages-components/GenrePage.js"],"names":["React","useEffect","useState","useContext","makeAxiosRequest","PageTitle","PlayCard","useId","useInfiScroll","MessageContext","GenrePage","id","setMessage","playLists","setPlayLists","name","setName","setNext","lastRef","nameSource","requestName","listSource","requestList","makeRequest","nameData","listData","Promise","all","playlists","items","next","error","cancel","map","playlist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA8C,OAA9C;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AAEA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,SAAQC,cAAR,QAA6B,yBAA7B;AAGA,eAAe,SAASC,SAAT,GAAqB;AAChC,QAAMC,EAAE,GAAGJ,KAAK,EAAhB;AACA,QAAMK,UAAU,GAAGT,UAAU,CAACM,cAAD,CAA7B;AAEA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAM,CAACe,OAAD,EAAUC,OAAV,IAAqBV,aAAa,CAACM,YAAD,CAAxC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM,CAACkB,UAAD,EAAaC,WAAb,IAA4BhB,gBAAgB,CAAE,gDAA+CO,EAAG,EAApD,CAAlD;AACA,UAAM,CAACU,UAAD,EAAaC,WAAb,IAA4BlB,gBAAgB,CAAE,gDAA+CO,EAAG,qBAApD,CAAlD;;AAEA,UAAMY,WAAW,GAAG,YAAY;AAC5B,UAAG;AACC,cAAM,CAACC,QAAD,EAAWC,QAAX,IAAuB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACP,WAAW,EAAZ,EAAgBE,WAAW,EAA3B,CAAZ,CAAnC;AACAN,QAAAA,OAAO,CAACQ,QAAQ,CAACT,IAAV,CAAP;AACAD,QAAAA,YAAY,CAACW,QAAQ,CAACG,SAAT,CAAmBC,KAApB,CAAZ;AACAZ,QAAAA,OAAO,CAACQ,QAAQ,CAACG,SAAT,CAAmBE,IAApB,CAAP;AACH,OALD,CAKC,OAAMC,KAAN,EAAY;AACTnB,QAAAA,UAAU,CAACmB,KAAD,CAAV;AACH;AACJ,KATD;;AAWA,QAAGpB,EAAH,EAAM;AACFY,MAAAA,WAAW;AACd;;AAED,WAAO,MAAM;AACTJ,MAAAA,UAAU,CAACa,MAAX;AACAX,MAAAA,UAAU,CAACW,MAAX;AACH,KAHD,CAnBY,CAuBhB;AACC,GAxBQ,EAwBN,CAACrB,EAAD,CAxBM,CAAT;AA0BA,sBACI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEI,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,SAAS,CAACoB,GAAV,CAAcC,QAAQ,iBACnB,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEhB,OAAf;AAAwB,IAAA,GAAG,EAAEgB,QAAQ,CAACvB,EAAtC;AAA0C,IAAA,IAAI,EAAEuB,QAAhD;AAA0D,IAAA,IAAI,EAAC,UAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADL,CAFJ,CADJ;AAUH","sourcesContent":["import React from 'react'\r\nimport {useEffect, useState, useContext} from 'react'\r\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest'\r\n\r\nimport PageTitle from '../featured-components/PageTitle'\r\nimport PlayCard from '../featured-components/PlayCard'\r\n\r\nimport useId from '../../utilities/hooks/useId'\r\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll'\r\nimport {MessageContext} from '../../utilities/context'\r\n\r\n\r\nexport default function GenrePage() {\r\n    const id = useId()\r\n    const setMessage = useContext(MessageContext)\r\n\r\n    const [playLists, setPlayLists] = useState([])\r\n    const [name, setName] = useState('')\r\n\r\n    const [setNext, lastRef] = useInfiScroll(setPlayLists)\r\n\r\n    useEffect(() => {\r\n        const [nameSource, requestName] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories/${id}`)\r\n        const [listSource, requestList] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories/${id}/playlists?limit=50`)\r\n\r\n        const makeRequest = async () => {\r\n            try{\r\n                const [nameData, listData] = await Promise.all([requestName(), requestList()])\r\n                setName(nameData.name)\r\n                setPlayLists(listData.playlists.items)\r\n                setNext(listData.playlists.next)\r\n            }catch(error){\r\n                setMessage(error)\r\n            }\r\n        }\r\n\r\n        if(id){\r\n            makeRequest()\r\n        }\r\n        \r\n        return () => {\r\n            nameSource.cancel()\r\n            listSource.cancel()\r\n        }\r\n    // eslint-disable-next-line\r\n    }, [id])\r\n\r\n    return (\r\n        <div className='GenrePage page-content'>\r\n            <PageTitle name={name}/>\r\n            <div className=\"browseGrid\">\r\n                {playLists.map(playlist => (\r\n                    <PlayCard ref={lastRef} key={playlist.id} info={playlist} type=\"playlist\"/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}